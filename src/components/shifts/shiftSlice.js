import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchShifts, createShift } from "./shiftAPI";
import produce from "immer";

export const Statuses = {
  Initial: "Not Fetched",
  Loading: "Loading..",
  UpToDate: "Up To Date",
  Deleted: "Deleted",
  Error: "Error",
};

const initialState = {
  user_id: 0,
  start: new Date().toString(),
  end: new Date().toString(),
  description: "",
  position: 0,
  proShifts: [],
  currentShifts: [],
  status: Statuses.Initial,
  date: new Date().toString(),
};

export const fetchShiftsAsync = createAsyncThunk(
  "shifts/fetchShifts",
  async (userId) => {
    const response = await fetchShifts(userId);
    return response;
  }
);

export const createShiftAsync = createAsyncThunk(
  "shifts/createShift",
  async (shiftDetails) => {
    const response = await createShift(shiftDetails);
    return response;
  }
);

export const initialShiftState = initialState;

export const shiftSlice = createSlice({
  name: "shift",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    createProShifts: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.proShifts = action.payload;
    },
    resetProShifts: (state, action) => {
      state.proShifts = [];
      state.start = new Date().toString();
      state.end = new Date().toString();
      state.position = 0;
      state.description = "";
      state.user_id = 0;
    },
    setStart: (state, action) => {
      state.start = action.payload;
    },
    setEnd: (state, action) => {
      state.end = action.payload;
    },
    setPosition: (state, action) => {
      state.position = action.payload;
    },
    setDescription: (state, action) => {
      state.description = action.payload;
    },
    setDate: (state, action) => {
      state.date = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // while you wait
      .addCase(fetchShiftsAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(fetchShiftsAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.currentShifts = action.payload;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(fetchShiftsAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      })
      // while you wait
      .addCase(createShiftAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(createShiftAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.currentShifts.push(action.payload);
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(createShiftAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      });
  },
});

export const {
  createProShifts,
  resetProShifts,
  setStart,
  setEnd,
  setPosition,
  setDescription,
  setDate,
} = shiftSlice.actions;

export const selectProShifts = (state) => state.shifts.proShifts;

export const selectCurrentShifts = (state) => state.shifts.currentShifts;

export const selectPosition = (state) => state.shifts.position;

export const selectDescription = (state) => state.shifts.description;

export const selectStart = (state) => state.shifts.start;

export const selectEnd = (state) => state.shifts.end;

export const selectShiftUserId = (state) => state.shifts.user_id;

export const selectDate = (state) => state.shifts.date;

export default shiftSlice.reducer;
