import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import produce from "immer";
import { fetchAppVersion } from "./appVersionAPI";

export const Statuses = {
  Initial: "Not Fetched",
  Loading: "Loading..",
  UpToDate: "Up To Date",
  Deleted: "Deleted",
  Error: "Error",
};

const initialState = {
  appVersion: "1.0.0",
};

export const fetchAppVersionAsync = createAsyncThunk(
  "appVersion/fetchAppVersion",
  async () => {
    const response = await fetchAppVersion();
    return response;
  }
);

export const appVersionSlice = createSlice({
  name: "appVersion",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // while you wait
      .addCase(fetchAppVersionAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(fetchAppVersionAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.appVersion = action.payload.version;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(fetchAppVersionAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      });
  },
});

export const {} = appVersionSlice.actions;

export const selectAppVersion = (state) => state.appVersions.appVersion;

export default appVersionSlice.reducer;
